<?php
/**
 * LogsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orthanc API
 *
 * This is the full documentation of the [REST API](https://book.orthanc-server.com/users/rest.html) of Orthanc.<p>This reference is automatically generated from the source code of Orthanc. A [shorter cheat sheet](https://book.orthanc-server.com/users/rest-cheatsheet.html) is part of the Orthanc Book.<p>An earlier, manually crafted version from August 2019, is [still available](2019-08-orthanc-openapi.html), but is not up-to-date anymore ([source](https://groups.google.com/g/orthanc-users/c/NUiJTEICSl8/m/xKeqMrbqAAAJ)).
 *
 * The version of the OpenAPI document: 1.11.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * LogsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LogsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for toolsLogLevelDicomGet
     *
     * Get log level for `dicom`.
     *
     */
    public function testToolsLogLevelDicomGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelDicomPut
     *
     * Set log level for `dicom`.
     *
     */
    public function testToolsLogLevelDicomPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelGenericGet
     *
     * Get log level for `generic`.
     *
     */
    public function testToolsLogLevelGenericGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelGenericPut
     *
     * Set log level for `generic`.
     *
     */
    public function testToolsLogLevelGenericPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelGet
     *
     * Get main log level.
     *
     */
    public function testToolsLogLevelGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelHttpGet
     *
     * Get log level for `http`.
     *
     */
    public function testToolsLogLevelHttpGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelHttpPut
     *
     * Set log level for `http`.
     *
     */
    public function testToolsLogLevelHttpPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelJobsGet
     *
     * Get log level for `jobs`.
     *
     */
    public function testToolsLogLevelJobsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelJobsPut
     *
     * Set log level for `jobs`.
     *
     */
    public function testToolsLogLevelJobsPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelLuaGet
     *
     * Get log level for `lua`.
     *
     */
    public function testToolsLogLevelLuaGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelLuaPut
     *
     * Set log level for `lua`.
     *
     */
    public function testToolsLogLevelLuaPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelPluginsGet
     *
     * Get log level for `plugins`.
     *
     */
    public function testToolsLogLevelPluginsGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelPluginsPut
     *
     * Set log level for `plugins`.
     *
     */
    public function testToolsLogLevelPluginsPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelPut
     *
     * Set main log level.
     *
     */
    public function testToolsLogLevelPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelSqliteGet
     *
     * Get log level for `sqlite`.
     *
     */
    public function testToolsLogLevelSqliteGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for toolsLogLevelSqlitePut
     *
     * Set log level for `sqlite`.
     *
     */
    public function testToolsLogLevelSqlitePut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}

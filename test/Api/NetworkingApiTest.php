<?php
/**
 * NetworkingApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orthanc API
 *
 * This is the full documentation of the [REST API](https://book.orthanc-server.com/users/rest.html) of Orthanc.<p>This reference is automatically generated from the source code of Orthanc. A [shorter cheat sheet](https://book.orthanc-server.com/users/rest-cheatsheet.html) is part of the Orthanc Book.<p>An earlier, manually crafted version from August 2019, is [still available](2019-08-orthanc-openapi.html), but is not up-to-date anymore ([source](https://groups.google.com/g/orthanc-users/c/NUiJTEICSl8/m/xKeqMrbqAAAJ)).
 *
 * The version of the OpenAPI document: 1.11.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * NetworkingApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NetworkingApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for modalitiesGet
     *
     * List DICOM modalities.
     *
     */
    public function testModalitiesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdConfigurationGet
     *
     * Get modality configuration.
     *
     */
    public function testModalitiesIdConfigurationGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdDelete
     *
     * Delete DICOM modality.
     *
     */
    public function testModalitiesIdDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdEchoPost
     *
     * Trigger C-ECHO SCU.
     *
     */
    public function testModalitiesIdEchoPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdFindInstancePost
     *
     * C-FIND SCU for instances.
     *
     */
    public function testModalitiesIdFindInstancePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdFindPatientPost
     *
     * C-FIND SCU for patients.
     *
     */
    public function testModalitiesIdFindPatientPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdFindPost
     *
     * Hierarchical C-FIND SCU.
     *
     */
    public function testModalitiesIdFindPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdFindSeriesPost
     *
     * C-FIND SCU for series.
     *
     */
    public function testModalitiesIdFindSeriesPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdFindStudyPost
     *
     * C-FIND SCU for studies.
     *
     */
    public function testModalitiesIdFindStudyPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdFindWorklistPost
     *
     * C-FIND SCU for worklist.
     *
     */
    public function testModalitiesIdFindWorklistPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdGet
     *
     * List operations on modality.
     *
     */
    public function testModalitiesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdMovePost
     *
     * Trigger C-MOVE SCU.
     *
     */
    public function testModalitiesIdMovePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdPut
     *
     * Update DICOM modality.
     *
     */
    public function testModalitiesIdPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdQueryPost
     *
     * Trigger C-FIND SCU.
     *
     */
    public function testModalitiesIdQueryPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdStorageCommitmentPost
     *
     * Trigger storage commitment request.
     *
     */
    public function testModalitiesIdStorageCommitmentPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdStorePost
     *
     * Trigger C-STORE SCU.
     *
     */
    public function testModalitiesIdStorePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for modalitiesIdStoreStraightPost
     *
     * Straight C-STORE SCU.
     *
     */
    public function testModalitiesIdStoreStraightPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for peersGet
     *
     * List Orthanc peers.
     *
     */
    public function testPeersGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for peersIdConfigurationGet
     *
     * Get peer configuration.
     *
     */
    public function testPeersIdConfigurationGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for peersIdDelete
     *
     * Delete Orthanc peer.
     *
     */
    public function testPeersIdDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for peersIdGet
     *
     * List operations on peer.
     *
     */
    public function testPeersIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for peersIdPut
     *
     * Update Orthanc peer.
     *
     */
    public function testPeersIdPut()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for peersIdStorePost
     *
     * Send to Orthanc peer.
     *
     */
    public function testPeersIdStorePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for peersIdStoreStraightPost
     *
     * Straight store to peer.
     *
     */
    public function testPeersIdStoreStraightPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for peersIdSystemGet
     *
     * Get peer system information.
     *
     */
    public function testPeersIdSystemGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesGet
     *
     * List query/retrieve operations.
     *
     */
    public function testQueriesGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdAnswersGet
     *
     * List answers to a query.
     *
     */
    public function testQueriesIdAnswersGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdAnswersIndexContentGet
     *
     * Get one answer.
     *
     */
    public function testQueriesIdAnswersIndexContentGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdAnswersIndexGet
     *
     * List operations on an answer.
     *
     */
    public function testQueriesIdAnswersIndexGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdAnswersIndexQueryInstancesPost
     *
     * Query the child instances of an answer.
     *
     */
    public function testQueriesIdAnswersIndexQueryInstancesPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdAnswersIndexQuerySeriesPost
     *
     * Query the child series of an answer.
     *
     */
    public function testQueriesIdAnswersIndexQuerySeriesPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdAnswersIndexQueryStudiesPost
     *
     * Query the child studies of an answer.
     *
     */
    public function testQueriesIdAnswersIndexQueryStudiesPost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdAnswersIndexRetrievePost
     *
     * Retrieve one answer.
     *
     */
    public function testQueriesIdAnswersIndexRetrievePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdDelete
     *
     * Delete a query.
     *
     */
    public function testQueriesIdDelete()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdGet
     *
     * List operations on a query.
     *
     */
    public function testQueriesIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdLevelGet
     *
     * Get level of original query.
     *
     */
    public function testQueriesIdLevelGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdModalityGet
     *
     * Get modality of original query.
     *
     */
    public function testQueriesIdModalityGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdQueryGet
     *
     * Get original query arguments.
     *
     */
    public function testQueriesIdQueryGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queriesIdRetrievePost
     *
     * Retrieve all answers.
     *
     */
    public function testQueriesIdRetrievePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storageCommitmentIdGet
     *
     * Get storage commitment report.
     *
     */
    public function testStorageCommitmentIdGet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for storageCommitmentIdRemovePost
     *
     * Remove after storage commitment.
     *
     */
    public function testStorageCommitmentIdRemovePost()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}

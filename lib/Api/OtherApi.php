<?php
/**
 * OtherApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Orthanc API
 *
 * This is the full documentation of the [REST API](https://book.orthanc-server.com/users/rest.html) of Orthanc.<p>This reference is automatically generated from the source code of Orthanc. A [shorter cheat sheet](https://book.orthanc-server.com/users/rest-cheatsheet.html) is part of the Orthanc Book.<p>An earlier, manually crafted version from August 2019, is [still available](2019-08-orthanc-openapi.html), but is not up-to-date anymore ([source](https://groups.google.com/g/orthanc-users/c/NUiJTEICSl8/m/xKeqMrbqAAAJ)).
 *
 * The version of the OpenAPI document: 1.11.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OtherApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OtherApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'instancesIdAttachmentsNameGet' => [
            'application/json',
        ],
        'instancesIdFramesFrameGet' => [
            'application/json',
        ],
        'patientsIdAttachmentsNameGet' => [
            'application/json',
        ],
        'seriesIdAttachmentsNameGet' => [
            'application/json',
        ],
        'studiesIdAttachmentsNameGet' => [
            'application/json',
        ],
        'toolsGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation instancesIdAttachmentsNameGet
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the instance of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function instancesIdAttachmentsNameGet($id, $name, $if_none_match = null, string $contentType = self::contentTypes['instancesIdAttachmentsNameGet'][0])
    {
        list($response) = $this->instancesIdAttachmentsNameGetWithHttpInfo($id, $name, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation instancesIdAttachmentsNameGetWithHttpInfo
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the instance of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesIdAttachmentsNameGetWithHttpInfo($id, $name, $if_none_match = null, string $contentType = self::contentTypes['instancesIdAttachmentsNameGet'][0])
    {
        $request = $this->instancesIdAttachmentsNameGetRequest($id, $name, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesIdAttachmentsNameGetAsync
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the instance of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesIdAttachmentsNameGetAsync($id, $name, $if_none_match = null, string $contentType = self::contentTypes['instancesIdAttachmentsNameGet'][0])
    {
        return $this->instancesIdAttachmentsNameGetAsyncWithHttpInfo($id, $name, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesIdAttachmentsNameGetAsyncWithHttpInfo
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the instance of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesIdAttachmentsNameGetAsyncWithHttpInfo($id, $name, $if_none_match = null, string $contentType = self::contentTypes['instancesIdAttachmentsNameGet'][0])
    {
        $returnType = 'mixed';
        $request = $this->instancesIdAttachmentsNameGetRequest($id, $name, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesIdAttachmentsNameGet'
     *
     * @param  string $id Orthanc identifier of the instance of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesIdAttachmentsNameGetRequest($id, $name, $if_none_match = null, string $contentType = self::contentTypes['instancesIdAttachmentsNameGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling instancesIdAttachmentsNameGet'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling instancesIdAttachmentsNameGet'
            );
        }



        $resourcePath = '/instances/{id}/attachments/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation instancesIdFramesFrameGet
     *
     * List operations
     *
     * @param  string $frame  (required)
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesIdFramesFrameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function instancesIdFramesFrameGet($frame, $id, string $contentType = self::contentTypes['instancesIdFramesFrameGet'][0])
    {
        list($response) = $this->instancesIdFramesFrameGetWithHttpInfo($frame, $id, $contentType);
        return $response;
    }

    /**
     * Operation instancesIdFramesFrameGetWithHttpInfo
     *
     * List operations
     *
     * @param  string $frame  (required)
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesIdFramesFrameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function instancesIdFramesFrameGetWithHttpInfo($frame, $id, string $contentType = self::contentTypes['instancesIdFramesFrameGet'][0])
    {
        $request = $this->instancesIdFramesFrameGetRequest($frame, $id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation instancesIdFramesFrameGetAsync
     *
     * List operations
     *
     * @param  string $frame  (required)
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesIdFramesFrameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesIdFramesFrameGetAsync($frame, $id, string $contentType = self::contentTypes['instancesIdFramesFrameGet'][0])
    {
        return $this->instancesIdFramesFrameGetAsyncWithHttpInfo($frame, $id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation instancesIdFramesFrameGetAsyncWithHttpInfo
     *
     * List operations
     *
     * @param  string $frame  (required)
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesIdFramesFrameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function instancesIdFramesFrameGetAsyncWithHttpInfo($frame, $id, string $contentType = self::contentTypes['instancesIdFramesFrameGet'][0])
    {
        $returnType = 'mixed';
        $request = $this->instancesIdFramesFrameGetRequest($frame, $id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'instancesIdFramesFrameGet'
     *
     * @param  string $frame  (required)
     * @param  string $id  (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['instancesIdFramesFrameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function instancesIdFramesFrameGetRequest($frame, $id, string $contentType = self::contentTypes['instancesIdFramesFrameGet'][0])
    {

        // verify the required parameter 'frame' is set
        if ($frame === null || (is_array($frame) && count($frame) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $frame when calling instancesIdFramesFrameGet'
            );
        }

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling instancesIdFramesFrameGet'
            );
        }


        $resourcePath = '/instances/{id}/frames/{frame}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($frame !== null) {
            $resourcePath = str_replace(
                '{' . 'frame' . '}',
                ObjectSerializer::toPathValue($frame),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patientsIdAttachmentsNameGet
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the patient of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patientsIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function patientsIdAttachmentsNameGet($id, $name, $if_none_match = null, string $contentType = self::contentTypes['patientsIdAttachmentsNameGet'][0])
    {
        list($response) = $this->patientsIdAttachmentsNameGetWithHttpInfo($id, $name, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation patientsIdAttachmentsNameGetWithHttpInfo
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the patient of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patientsIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function patientsIdAttachmentsNameGetWithHttpInfo($id, $name, $if_none_match = null, string $contentType = self::contentTypes['patientsIdAttachmentsNameGet'][0])
    {
        $request = $this->patientsIdAttachmentsNameGetRequest($id, $name, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patientsIdAttachmentsNameGetAsync
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the patient of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patientsIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patientsIdAttachmentsNameGetAsync($id, $name, $if_none_match = null, string $contentType = self::contentTypes['patientsIdAttachmentsNameGet'][0])
    {
        return $this->patientsIdAttachmentsNameGetAsyncWithHttpInfo($id, $name, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patientsIdAttachmentsNameGetAsyncWithHttpInfo
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the patient of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patientsIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patientsIdAttachmentsNameGetAsyncWithHttpInfo($id, $name, $if_none_match = null, string $contentType = self::contentTypes['patientsIdAttachmentsNameGet'][0])
    {
        $returnType = 'mixed';
        $request = $this->patientsIdAttachmentsNameGetRequest($id, $name, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patientsIdAttachmentsNameGet'
     *
     * @param  string $id Orthanc identifier of the patient of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patientsIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patientsIdAttachmentsNameGetRequest($id, $name, $if_none_match = null, string $contentType = self::contentTypes['patientsIdAttachmentsNameGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patientsIdAttachmentsNameGet'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling patientsIdAttachmentsNameGet'
            );
        }



        $resourcePath = '/patients/{id}/attachments/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation seriesIdAttachmentsNameGet
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the series of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['seriesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function seriesIdAttachmentsNameGet($id, $name, $if_none_match = null, string $contentType = self::contentTypes['seriesIdAttachmentsNameGet'][0])
    {
        list($response) = $this->seriesIdAttachmentsNameGetWithHttpInfo($id, $name, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation seriesIdAttachmentsNameGetWithHttpInfo
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the series of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['seriesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function seriesIdAttachmentsNameGetWithHttpInfo($id, $name, $if_none_match = null, string $contentType = self::contentTypes['seriesIdAttachmentsNameGet'][0])
    {
        $request = $this->seriesIdAttachmentsNameGetRequest($id, $name, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation seriesIdAttachmentsNameGetAsync
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the series of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['seriesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function seriesIdAttachmentsNameGetAsync($id, $name, $if_none_match = null, string $contentType = self::contentTypes['seriesIdAttachmentsNameGet'][0])
    {
        return $this->seriesIdAttachmentsNameGetAsyncWithHttpInfo($id, $name, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation seriesIdAttachmentsNameGetAsyncWithHttpInfo
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the series of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['seriesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function seriesIdAttachmentsNameGetAsyncWithHttpInfo($id, $name, $if_none_match = null, string $contentType = self::contentTypes['seriesIdAttachmentsNameGet'][0])
    {
        $returnType = 'mixed';
        $request = $this->seriesIdAttachmentsNameGetRequest($id, $name, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'seriesIdAttachmentsNameGet'
     *
     * @param  string $id Orthanc identifier of the series of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['seriesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function seriesIdAttachmentsNameGetRequest($id, $name, $if_none_match = null, string $contentType = self::contentTypes['seriesIdAttachmentsNameGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling seriesIdAttachmentsNameGet'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling seriesIdAttachmentsNameGet'
            );
        }



        $resourcePath = '/series/{id}/attachments/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation studiesIdAttachmentsNameGet
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the study of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['studiesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function studiesIdAttachmentsNameGet($id, $name, $if_none_match = null, string $contentType = self::contentTypes['studiesIdAttachmentsNameGet'][0])
    {
        list($response) = $this->studiesIdAttachmentsNameGetWithHttpInfo($id, $name, $if_none_match, $contentType);
        return $response;
    }

    /**
     * Operation studiesIdAttachmentsNameGetWithHttpInfo
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the study of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['studiesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function studiesIdAttachmentsNameGetWithHttpInfo($id, $name, $if_none_match = null, string $contentType = self::contentTypes['studiesIdAttachmentsNameGet'][0])
    {
        $request = $this->studiesIdAttachmentsNameGetRequest($id, $name, $if_none_match, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation studiesIdAttachmentsNameGetAsync
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the study of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['studiesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function studiesIdAttachmentsNameGetAsync($id, $name, $if_none_match = null, string $contentType = self::contentTypes['studiesIdAttachmentsNameGet'][0])
    {
        return $this->studiesIdAttachmentsNameGetAsyncWithHttpInfo($id, $name, $if_none_match, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation studiesIdAttachmentsNameGetAsyncWithHttpInfo
     *
     * List operations on attachments
     *
     * @param  string $id Orthanc identifier of the study of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['studiesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function studiesIdAttachmentsNameGetAsyncWithHttpInfo($id, $name, $if_none_match = null, string $contentType = self::contentTypes['studiesIdAttachmentsNameGet'][0])
    {
        $returnType = 'mixed';
        $request = $this->studiesIdAttachmentsNameGetRequest($id, $name, $if_none_match, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'studiesIdAttachmentsNameGet'
     *
     * @param  string $id Orthanc identifier of the study of interest (required)
     * @param  string $name The name of the attachment, or its index (cf. &#x60;UserContentType&#x60; configuration option) (required)
     * @param  string $if_none_match Optional revision of the attachment, to check if its content has changed (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['studiesIdAttachmentsNameGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function studiesIdAttachmentsNameGetRequest($id, $name, $if_none_match = null, string $contentType = self::contentTypes['studiesIdAttachmentsNameGet'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling studiesIdAttachmentsNameGet'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling studiesIdAttachmentsNameGet'
            );
        }



        $resourcePath = '/studies/{id}/attachments/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation toolsGet
     *
     * List operations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return mixed
     */
    public function toolsGet(string $contentType = self::contentTypes['toolsGet'][0])
    {
        list($response) = $this->toolsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation toolsGetWithHttpInfo
     *
     * List operations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of mixed, HTTP status code, HTTP response headers (array of strings)
     */
    public function toolsGetWithHttpInfo(string $contentType = self::contentTypes['toolsGet'][0])
    {
        $request = $this->toolsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('mixed' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('mixed' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'mixed', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'mixed';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'mixed',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation toolsGetAsync
     *
     * List operations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolsGetAsync(string $contentType = self::contentTypes['toolsGet'][0])
    {
        return $this->toolsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation toolsGetAsyncWithHttpInfo
     *
     * List operations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function toolsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['toolsGet'][0])
    {
        $returnType = 'mixed';
        $request = $this->toolsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'toolsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['toolsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function toolsGetRequest(string $contentType = self::contentTypes['toolsGet'][0])
    {


        $resourcePath = '/tools';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
